const {RichText, PlainText, InnerBlocks, InspectorControls, MediaUpload} = wp.editor;
const {registerBlockType} = wp.blocks;
const {Fragment} = wp.element;
const {SelectControl, Button, ToggleControl} = wp.components;
const {__} = wp.i18n;

try {
	var icon = require('./icon').default; //Icon is generated by bash script in the theme root. Use "bash convert-thumbnails-to-svg.bash"
} catch (ex) {
	var icon = 'editor-code';
}

const slideAttributes = {
	background: {
		attribute: 'style',
		selector: '.screen_section',
		default: imgSrc('relaxsee/bg-relaxsee.png')
	},

	title :{
    type: 'string',
    source: 'html',
    selector: '.rs-digital__title',
    default: '<span style="color: #c09800" class="artb-font-color">Digital eye strain</span> <br> is a common <br> condition for all ages'
  },

  boardTitle :{
    type: 'string',
    selector: '.rs-digital__board-title',
    default: 'Digital eye strain by age group',
    source: 'html',
  },

  boardDescr :{
    type: 'string',
    selector: '.rs-digital__board-descr',
    default: 'report symptoms of digital eye strain*',
    source: 'html',
  },


  boardItems: {
    type: 'array',
    source: 'query',
    selector: '.rs-digital__board-col',
    default: [
			{
        itemYears: '19-34',
        itemTxt: 'years old',
        itemVal: '68',
        itemPercent: '%'
      },
			{
        itemYears: '35-50',
        itemTxt: 'years old',
        itemVal: '63',
        itemPercent: '%'
      },
			{
        itemYears: '51-69',
        itemTxt: 'years old',
        itemVal: '57',
        itemPercent: '%'
      },
    ],
    query: {
      itemYears: {
				type: 'string',
				selector: '.rs-digital__board-years',
				source: 'html',
			},
      itemTxt: {
				type: 'string',
				selector: '.rs-digital__board-txt',
				source: 'html',
			},
      itemVal: {
				type: 'string',
				selector: '.rs-digital__board-val .value-block',
				source: 'html',
			},
      itemPercent: {
				type: 'string',
				selector: '.rs-digital__board-percent',
				source: 'html',
			},
    },
  },

  imgUrl1: {
    attribute: 'src',
		selector: '.rs-digital__top-img img',
		default: imgSrc('relaxsee/rs-digital-01.png')
  },

  imgUrl2: {
    attribute: 'src',
		selector: '.rs-digital__bottom-img img',
		default: imgSrc('relaxsee/rs-digital-02.png')
  },

  cardTitle :{
    type: 'string',
    selector: '.rs-digital__card-title',
    default: 'Symptoms of digital eye strain',
    source: 'html',
  },

  listItems: {
    type: 'array',
    source: 'query',
    selector: '.rs-digital__card ul li',
    default: [
			{
        listTxt: 'Blurred vision',
      },
			{
        listTxt: 'Irritated or dry eyes',
      },
			{
        listTxt: 'Back and neck pain',
      },
			{
        listTxt: 'Headache',
      },
			{
        listTxt: 'Occasional double vision',
      },
    ],
    query: {
      listTxt: {
				type: 'string',
				selector: 'span',
				source: 'html',
			},
    },
  },

  footText :{
    type: 'string',
    selector: '.rs-digital__foot',
    default: '*Source : 2015 The vision Council survey US',
    source: 'html',
  },
};

registerBlockType('presentation/slide87', {
	title: __('Slide: #87', 'np'),
	icon: icon,
	category: 'nikon-catalog',
	attributes: slideAttributes,
	edit({className, attributes, setAttributes}) {

		const getImageButton = (openEvent, value) => {

			if (value)
				return (
					<img
						src={value}
						onClick={openEvent}
						className="image"
					/>
				);

			return (
				<div className="button-container">
					<Button
						onClick={openEvent}
						className="button button-large"
					>
						{__('Pick an image', 'np')}
					</Button>
				</div>
			);
    };

    const boardItem = (i) => {
      return <div className="rs-digital__board-col">
          <div className="rs-digital__board-item">
            <span className="rs-digital__board-years">
              <RichText
                onChange={content => {
                  let boardItems = attributes.boardItems.slice();
                  boardItems[i].itemYears = content;
                  setAttributes({boardItems: boardItems});
                }}
                value={attributes.boardItems[i].itemYears}
              />
            </span>
            <span className="rs-digital__board-txt">
              <RichText
                onChange={content => {
                  let boardItems = attributes.boardItems.slice();
                  boardItems[i].itemTxt = content;
                  setAttributes({boardItems: boardItems});
                }}
                value={attributes.boardItems[i].itemTxt}
              />
            </span>
          </div>
          <span className="rs-digital__board-val">
            <span className="value-block">
              <RichText
                onChange={content => {
                  let boardItems = attributes.boardItems.slice();
                  boardItems[i].itemVal = content;
                  setAttributes({boardItems: boardItems});
                }}
                value={attributes.boardItems[i].itemVal}
              />
            </span>
            <span className="rs-digital__board-percent">
              <RichText
                onChange={content => {
                  let boardItems = attributes.boardItems.slice();
                  boardItems[i].itemPercent = content;
                  setAttributes({boardItems: boardItems});
                }}
                value={attributes.boardItems[i].itemPercent}
              />
            </span>
          </span>
      </div>
    }

    const listItem = (i) => {
      return <li>
        <span>
          <RichText
            onChange={content => {
              let listItems = attributes.listItems.slice();
              listItems[i].listTxt = content;
              setAttributes({listItems: listItems});
            }}
            value={attributes.listItems[i].listTxt}
          />
        </span>
      </li>
    }

		return <div className={className + " block-presentation-slide all-empty"} style={{backgroundImage: `url(${attributes.background})`}}>

      <InspectorControls>
        <h3>{__('Pick background image', 'np')}:</h3>
        <MediaUpload
          onSelect={media => {
            setAttributes({background: media.url});
          }}
          type="image"
          value={attributes.imageID}
          render={({open}) => getImageButton(open, attributes.background)}
        />
      </InspectorControls>

      <div className="screen_body_wrapper start bottom bottom--mod no_relative">
        <div className="rs-digital">
          <div className="rs-digital__holder">
            <div className="rs-digital__top">
              <div className="rs-digital__top-left">
                <span className="rs-digital__title">
                  <RichText
                    onChange={content => setAttributes({title: content})}
                    value={attributes.title}
                  />
                </span>
                <div className="rs-digital__board">
                  <span className="rs-digital__board-title">
                    <RichText
                      onChange={content => setAttributes({boardTitle: content})}
                      value={attributes.boardTitle}
                    />
                  </span>
                  <div className="rs-digital__board-row">
                    {attributes.boardItems.map((el, i) => {
                      return boardItem(i);
                    })}
                  </div>
                  <span className="rs-digital__board-descr">
                    <RichText
                      onChange={content => setAttributes({boardDescr: content})}
                      value={attributes.boardDescr}
                    />
                  </span>
                </div>
              </div>
              <div className="rs-digital__top-right">
                <figure className="rs-digital__top-img">
                  <MediaUpload
                    onSelect={media => setAttributes({imgUrl1: media.url})}
                    type="image"
                    value={attributes.imageID}
                    render={({open}) => getImageButton(open, attributes.imgUrl1)}
                  />
                </figure>
              </div>
            </div>
            <div className="rs-digital__bottom">
              <figure className="rs-digital__bottom-img">
                <MediaUpload
                  onSelect={media => setAttributes({imgUrl2: media.url})}
                  type="image"
                  value={attributes.imageID}
                  render={({open}) => getImageButton(open, attributes.imgUrl2)}
                />
              </figure>
              <div className="rs-digital__card">
                <span className="rs-digital__card-title">
                  <RichText
                    onChange={content => setAttributes({cardTitle: content})}
                    value={attributes.cardTitle}
                  />
                </span>
                <ul>
                  {attributes.listItems.map((el, i) => {
                    return listItem(i);
                  })}
                </ul>
              </div>
            </div>
          </div>
          <div className="rs-digital__foot">
            <RichText
              onChange={content => setAttributes({footText: content})}
              value={attributes.footText}
            />
          </div>
        </div>
      </div>
    </div>;
	},
	save({attributes}) {

    const boardItem = (i) => {
      return <div className="rs-digital__board-col">
          <div className="rs-digital__board-item">
            <span className="rs-digital__board-years">
              <RichText.Content value={attributes.boardItems[i].itemYears}/>
            </span>
            <span className="rs-digital__board-txt">
              <RichText.Content value={attributes.boardItems[i].itemTxt}/>
            </span>
          </div>
          <span className="rs-digital__board-val">
            <span className="value-block">
              <RichText.Content value={attributes.boardItems[i].itemVal}/>
            </span>
            <span className="rs-digital__board-percent">
              <RichText.Content value={attributes.boardItems[i].itemPercent}/>
            </span>
          </span>
      </div>
    }

    const listItem = (i) => {
      return <li>
        <span><RichText.Content value={attributes.listItems[i].listTxt}/></span>
      </li>
    }

		return <div className="screen_section screen_section--not-padding" data-section="#_SLIDE_NUMBER" style={{backgroundImage: `url(${attributes.background})`}}>

      <div className="screen_body_wrapper start bottom bottom--mod no_relative">
        <div className="rs-digital opacity_animate">
        <div className="rs-digital__holder">
            <div className="rs-digital__top">
              <div className="rs-digital__top-left">
                <span className="rs-digital__title">
                  <RichText.Content value={attributes.title}/>
                </span>
                <div className="rs-digital__board">
                  <span className="rs-digital__board-title">
                    <RichText.Content value={attributes.boardTitle}/>
                  </span>
                  <div className="rs-digital__board-row">
                    {attributes.boardItems.map((el, i) => {
                      return boardItem(i);
                    })}
                  </div>
                  <span className="rs-digital__board-descr">
                    <RichText.Content value={attributes.boardDescr}/>
                  </span>
                </div>
              </div>
              <div className="rs-digital__top-right">
                <figure className="rs-digital__top-img">
                  <img src={attributes.imgUrl1}/>
                </figure>
              </div>
            </div>
            <div className="rs-digital__bottom">
              <figure className="rs-digital__bottom-img">
                <img src={attributes.imgUrl2}/>
              </figure>
              <div className="rs-digital__card">
                <span className="rs-digital__card-title">
                  <RichText.Content value={attributes.cardTitle}/>
                </span>
                <ul>
                  {attributes.listItems.map((el, i) => {
                    return listItem(i);
                  })}
                </ul>
              </div>
            </div>
          </div>
          <div className="rs-digital__foot">
            <RichText.Content value={attributes.footText}/>
          </div>
        </div>
      </div>
		</div>;
	},
});
