import {imgUploader} from "../../../utils";

const {RichText, PlainText, InnerBlocks, InspectorControls, MediaUpload} = wp.editor;
const {registerBlockType} = wp.blocks;
const {Fragment} = wp.element;
const {SelectControl, Button, Modal, ToggleControl} = wp.components;
const {withState} = wp.compose;
const {withSelect} = wp.data;
const {__} = wp.i18n;

try {
	var icon = require('./icon').default; //Icon is generated by bash script in the theme root. Use "bash convert-thumbnails-to-svg.bash"
} catch (ex) {
	var icon = 'editor-code';
}

registerBlockType('presentation/slide120', {
	title: 'Slide 120',
	icon: icon,
	category: 'nikon-presentations',
	attributes: {
		slideTitle: {
			type: 'string',
			selector: '.brand_wrapper .gold .real-title',
			source: 'html',
			default: 'OUTSTANDING INNOVATION',
		},
		slideGoldSubtitle: {
			type: 'string',
			selector: '.brand_wrapper .gold .gold-subtitle',
			source: 'html',
			default: 'SINGLE VISION LENS',
		},
		slideSubTitle: {
			type: 'string',
			selector: '.brand_wrapper .white',
			source: 'html',
			default: 'Fully personalized vision',
		},
		properties: {
			type: 'array',
			source: 'query',
			selector: '.vision__lens-inner img',
			default: [
				{
					url: imgSrc('vision/vision-single-01.png')
				},
				{
					url: imgSrc('vision/vision-single-02.png')
				},
				{
					url: imgSrc('vision/vision-single-03.png')
				},
				{
					url: imgSrc('vision/vision-single-04.png')
				},
			],
			query: {
				url: {
					type: 'string',
					source: 'attribute',
					attribute: 'src',
				},
			}
		},
		iconsLayout: {
			type: 'string',
			default: 'large'
		},
		navExclude: {
			type: 'boolean',
			default: true,
		},
		items: {
			type: 'array',
			selector: '.vision__col',
			source: 'query',
			default: [
				{
					image: imgSrc('vision/vision-icon-01@2x.png'),
					title: 'INSIGHT<br>TECHNOLOGY',
					properties: [
						{index: 0},
					],
				},
				{
					image: imgSrc('vision/vision-icon-02@2x.png'),
					title: 'FRAME SHAPE<br>OPTIMIZATION',
					properties: [
						{index: 0},
					],
				},
				{
					image: imgSrc('vision/vision-icon-03@2x.png'),
					title: 'FITTING<br>PARAMETERS',
					properties: [
						{index: 1},
						{index: 0},
						{index: 2},
						{index: 3},
					],
				},
				{
					image: imgSrc('vision/vision-icon-05@2x.png'),
					title: 'BASE CURVE<br>SELECTION',
					properties: [
						{index: 1},
						{index: 0},
						{index: 2},
						{index: 3},
					],
				},
			],
			query: {
				image: {
					type: 'string',
					source: 'attribute',
					attribute: 'src',
					selector: '.vision__item-icon img'
				},
				title: {
					type: 'string',
					selector: '.vision__item-title',
					source: 'html'
				},
				text: {
					type: 'string',
					selector: '.vision__item-descr',
					source: 'html'
				},
				properties: {
					type: 'array',
					source: 'query',
					selector: '.meta .property',
					query: {
						index: {
							type: 'number',
							source: 'attribute',
							selector: '.value',
							attribute: 'data-property',
						}
					}

				},
			}
		},
	}

	,
	edit: withState({
		activeVision: false,
		activeIcon: false,
		activeItem: false,
		hoverItem: false,
	})
	(({className, attributes, setAttributes, setState, activeVision, activeIcon, activeItem, hoverItem}) => {

		if ('undefined' === typeof attributes.properties)
			setAttributes({properties: []});


		const visionProperties = attributes.properties.filter(visionProperty => visionProperty.hasOwnProperty('url'));

		window.visionColClass = 'vision__col--mod';
		window.visionItemClass = 'vision__item--mod js-vision-filter';

		console.log(attributes);

		const getImageButton = (openEvent, value) => {

			if (value)
				return (
					<img
						src={value}
						onClick={openEvent}
						className="image"
					/>
				);

			return (
				<div className="button-container">
					<Button
						onClick={openEvent}
						className="button button-large"
					>
						{__('Pick an image', 'np')}
					</Button>
				</div>
			);
		};

		const propertyItem = (i) => {
			return <div href="#" className={(activeIcon === i ? 'active ' : '') + "vision__lens-item"} onClick={() => {
				setState({
					activeIcon: i,
					hoverItem: false,
				})
			}}>
				<MediaUpload
					onSelect={media => {
						let prs = attributes.properties.slice();
						prs[i] = {url: media.url};
						setAttributes({properties: prs});
					}}
					type="image"
					value={attributes.imageID}
					render={({open}) => getImageButton(i === activeIcon ? open : false, attributes.properties[i].url)}
				/>
				{activeIcon === i && (
					<InspectorControls>
						<h3>{__('Remove this item', 'np')}</h3>
						<Button
							onClick={() => {
								if (!confirm(__("Are you sure?", 'mp')))
									return;
								let prs = attributes.properties.slice();
								prs.splice(i, 1);
								setAttributes({properties: prs});
							}}
							className="button button-large"
						>
							{__('Remove', 'np')}
						</Button>
						<br/>
						<br/>
					</InspectorControls>
				)}
			</div>
		};


		const item = (i, ghost = false) => {
			return <div
				className={(i === activeItem ? ' active' : '') + (i === hoverItem ? ' hover' : '') + (ghost ? ' ghost ' : '') + " vision__col vision__col--mod"}>
				<div
					className={(i === activeItem ? ' active' : '') + " vision__item--mod js-vision-filter vision__item js-vision-item"}
					onClick={() => {
						if (ghost) {
							let items = attributes.items.slice();
							items.push({});
							setAttributes({items: items});
							return;
						}
						setState({
							hoverItem: i,
							activeIcon: false,
						})
					}}>

					{!ghost && <Fragment>

						{i === hoverItem && attributes.items.length > 1 &&
						<InspectorControls>
							<h3 style={{color: 'red'}}>{__("Remove this item", 'mp')}</h3>
							<Button
								onClick={() => {
									if (!confirm(__("Are you sure?", 'mp')))
										return;
									let items = attributes.items.slice();
									items.splice(i, 1);
									setAttributes({items: items});
								}}
								className="button button-large"
							>
								{__('Remove', 'np')}
							</Button>
							<br/><br/>
							<h3>Move this item:</h3>
							<div>
								{0 !== i && <Button
									onClick={() => {
										let items = attributes.items.slice();
										let temp = items[i];
										items[i] = items[i - 1];
										items[i - 1] = temp;
										setAttributes({
											items: items,
										});
										setState({
											hoverItem: hoverItem - 1,
											activeItem: i === activeItem ? activeItem - 1 : (activeItem === hoverItem - 1 ? activeItem + 1 : activeItem),
											activeIcon: false,
										});
									}}
									className="button button-large"
								>
									&larr;{__('Left', 'np')}
								</Button>}
								<span>&nbsp;</span>
								{i !== attributes.items.length - 1 && <Button
									onClick={() => {
										let items = attributes.items.slice();
										let temp = items[i];
										items[i] = items[i + 1];
										items[i + 1] = temp;
										setAttributes({
											items: items,
										});
										setState({
											hoverItem: hoverItem + 1,
											activeItem: i === activeItem ? activeItem + 1 : (activeItem === hoverItem + 1 ? activeItem - 1 : activeItem),
											activeIcon: false,
										});
									}}
									className="button button-large"
								>
									{__('Right', 'np')}&rarr;
								</Button>}
							</div>
							<br/>
						</InspectorControls>
						}

						{i === hoverItem && attributes.properties.length && <InspectorControls>
							<h3>{__('Select the properties')}</h3>
							<ul className="properties-wrapper">
								{attributes.properties.map((property, j) => {
									return attributes.properties[j].hasOwnProperty('url') && attributes.properties[j].url && (
										<li
											className={attributes.items[i].properties.constructor === Array && attributes.items[i].properties.map(p => parseInt(p.index)).includes(j) ? 'property-active' : ''}
										>
											<img
												onClick={() => {
													let items = attributes.items.slice();
													if (!items[i].properties.length)
														items[i].properties = [];
													items[i].properties.map(p => parseInt(p.index)).includes(i) ? items[i].properties.splice(items[i].properties.map(p => parseInt(p.index)).indexOf(i), 1) : items[i].properties.push({index: i});
													setAttributes({items: items});
												}}
												src={attributes.properties[j].url} alt="img"/>

										</li>
									)
								})}
							</ul>
						</InspectorControls>}

						<span className="vision__item-btn js-vision-btn" onClick={() => {
							setState({activeItem: i})
						}}/>
						<span className="vision__item-close js-vision-close" onClick={() => {
							setState({activeItem: false})
						}}/>
						<div className="vision__item-icon">
							<MediaUpload
								onSelect={media => {
									let items = attributes.items.slice();
									items[i].image = media.url;
									setAttributes({items: items});
								}}
								type="image"
								render={({open}) => imgUploader(attributes.items[i].image, open)}
							/>
						</div>
						<span className="vision__item-title">
						<RichText
							value={attributes.items[i].title}
							onChange={content => {
								let items = attributes.items.slice();
								items[i].title = content;
								setAttributes({items: items});
							}}
						/>
					</span>
						<div className="vision__item-descr">
							<RichText
								value={attributes.items[i].text}
								onChange={content => {
									let items = attributes.items.slice();
									items[i].text = content;
									setAttributes({items: items});
								}}
							/>
						</div>
					</Fragment>}


				</div>

			</div>
		};

		return <div className={className + " block-presentation-slide all-empty"} style={img('bg/bg-vision@2x.jpg')}>
			<div className="brand_wrapper">
				<span className="gold">
					<span className="real-title">
						<RichText
							onChange={content => setAttributes({slideTitle: content})}
							value={attributes.slideTitle}
							placeholder="SLIDE TITLE"
							className="slide-title-input"
						/>
					</span>
					<span className="gold-subtitle">
						<RichText
							onChange={content => setAttributes({slideGoldSubtitle: content})}
							value={attributes.slideGoldSubtitle}
							placeholder="SLIDE GOLD SUBTITLE"
						/>
					</span>
				 </span>
				<span className="white opacity_animate">
					<RichText
						onChange={content => setAttributes({slideSubTitle: content})}
						value={attributes.slideSubTitle}
						placeholder="Slide subtitle"
						className="slide-subtitle-input"
					/>
				</span>
			</div>

			<InspectorControls>
				<h3>{__('Exclude this slide from arrow navigation?', 'np')}</h3>
				<ToggleControl
					label={__("Exclude from navigation?", 'np')}
					help={attributes.navExclude ? __('Exclude', 'np') : __('Include', 'np')}
					checked={attributes.navExclude}
					onChange={() => setAttributes({navExclude: !attributes.navExclude})}
				/>
				<br/>
				<h3>{__('Select the icons layout (Small / Large)', 'np')}</h3>
				<ToggleControl
					label={__("Use large icons layout?", 'np')}
					help={attributes.exclude === 'large' ? __('Large', 'np') : __('Small', 'np')}
					checked={attributes.iconsLayout === 'large'}
					onChange={() => setAttributes({iconsLayout: attributes.iconsLayout === 'small' ? 'large' : 'small'})}
				/>
			</InspectorControls>

			<div className="screen_body_wrapper start top no_relative">
				<div className="vision opacity_animate">
					<div
						className={(attributes.iconsLayout === 'large' ? 'vision__lens--single' : '') + " vision__lens"}>
						<div className="vision__lens-inner">

							{attributes.properties.map((property, i) => {
								return propertyItem(i);
							})}

							<a href="#" className="vision__lens-item " onClick={() => {
								let prs = attributes.properties.slice();
								prs.push({});
								setAttributes({properties: prs});
							}}>
								<span className="dashicons dashicons-plus" title="Add New Property"
								/>
							</a>
						</div>
					</div>
					<div className="vision__wrap vision__wrap--filter active">
						<div className="vision__content">
							<div className="vision__row">
								{attributes.items.map((cardItem, i) => {
									return item(i);
								})}
								{attributes.items.length < 6 && item(6, true)}
							</div>
						</div>
					</div>
				</div>
			</div>

		</div>;
	}),
	save({attributes}) {

		const propertyItem = (i) => {
			return attributes.properties[i] && attributes.properties[i].hasOwnProperty('url') &&
				<a href="#" className="vision__lens-item">
					<img src={attributes.properties[i].url}/>
				</a>;
		};

		const item = (i) => {
			return <div className={" vision__col vision__col--mod"}
						data-properties={attributes.items[i].properties.constructor === Array && attributes.items[i].properties.length ? attributes.items[i].properties.map(p => p.index).join(',') : ''}
			>
				<div className={"vision__item--mod js-vision-filter vision__item js-vision-item"}>
					<span className="vision__item-btn js-vision-btn"/>
					<span className="vision__item-close js-vision-close"/>
					{attributes.items[i].image &&
					<div className="vision__item-icon">
						<img src={attributes.items[i].image}/>
					</div>}
					{attributes.items[i].title &&
					<span className="vision__item-title">
						<RichText.Content value={attributes.items[i].title}/>
					</span>}
					{attributes.items[i].text &&
					<div className="vision__item-descr">
						<RichText.Content value={attributes.items[i].text}/>
					</div>}
					<div className="meta">
						{attributes.items[i].properties.constructor === Array && attributes.items[i].properties.length && attributes.items[i].properties.map((p, j) => {
							return <div className='property'>
								<div className="value" data-property={p.index}/>
							</div>
						})}
					</div>
				</div>
			</div>;
		};

		return <div className={(attributes.navExclude ? 'nav-exclude ' : '') + "screen_section"}
					data-section="#_SLIDE_NUMBER" style={img('bg/bg-vision@2x.jpg')}>

			{(attributes.slideTitle || attributes.slideSubTitle) &&
			<div className="brand_wrapper">
				{attributes.slideTitle &&
				<span className="gold">
					<span className="real-title">
						<RichText.Content value={attributes.slideTitle}/>
					</span>
					{attributes.slideGoldSubtitle &&
					<span className="gold-subtitle">
							<RichText.Content value={attributes.slideGoldSubtitle}/>
						</span>
					}
				</span>
				}
				{attributes.slideSubTitle &&
				<span className="white opacity_animate">
						<RichText.Content value={attributes.slideSubTitle}/>
					</span>
				}
			</div>
			}

			<div className="screen_body_wrapper start top no_relative">
				<div className="vision opacity_animate">
					<div
						className={(attributes.iconsLayout === 'large' ? 'vision__lens--single' : '') + " vision__lens"}>
						<div className="vision__lens-inner">
							{attributes.properties.map((property, i) => {
								return propertyItem(i);
							})}
						</div>
					</div>
					<div className="vision__wrap vision__wrap--filter active">
						<div className="vision__content">
							<div className="vision__row">
								{attributes.items.map((cardItem, i) => {
									return item(i);
								})}
							</div>
						</div>
					</div>
				</div>
			</div>

		</div>;
	},
});