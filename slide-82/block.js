const {RichText, PlainText, InnerBlocks, InspectorControls, MediaUpload} = wp.editor;
const {registerBlockType} = wp.blocks;
const {Fragment} = wp.element;
const {SelectControl, Button, ToggleControl} = wp.components;
const {__} = wp.i18n;

try {
	var icon = require('./icon').default; //Icon is generated by bash script in the theme root. Use "bash convert-thumbnails-to-svg.bash"
} catch (ex) {
	var icon = 'editor-code';
}

const slideAttributes = {
	background: {
		attribute: 'style',
		selector: '.screen_section',
		default: imgSrc('master/bg-master.jpg')
	},
	slideTitle: {
		type: 'string',
		selector: '.brand_wrapper .gold'
	},
	slideSubTitle: {
		type: 'string',
		selector: '.brand_wrapper .white'
	},
	imageUrl1: {
		attribute: 'src',
		selector: '.title-screen__image img',
		default: imgSrc("soltes/soltes-img.png")
	},
	imageUrl2: {
		attribute: 'src',
		selector: '.title-screen__icon img',
		default: imgSrc("soltes/icon-soltes.svg")
	},
	screenName: {
		type: 'string',
		selector: '.title-screen__name',
		source: 'html',
		default: 'Wide, Sharp <br> And Customized For <br> Optimal Near Vision'
	},
	flipped: {
		type: 'boolean',
		default: false
	}
};

const imageKey = 'imageUrl';

registerBlockType('presentation/slide82', {
	title: __('Slide: #82', 'np'),
	icon: icon,
	category: 'nikon-catalog',
	attributes: slideAttributes,
	edit({className, attributes, setAttributes}) {


		const getImageButton = (openEvent, i, imageKey = 'imageUrl') => {

			//	console.log(attributes);

			if (attributes[`${imageKey}${i}`])
				return (
					<img
						src={attributes[`${imageKey}${i}`]}
						onClick={openEvent}
						className="image"
					/>
				);

			return (
				<div className="button-container">
					<Button
						onClick={openEvent}
						className="button button-large"
					>
						{__('Pick an image', 'np')}
					</Button>
				</div>
			);

		};


		const leftSide = attributes[`${imageKey}1`] &&
			<div className="title-screen__inner title-screen__inner--bg">
				<figure className="title-screen__image">
					<img src={attributes[`${imageKey}1`]} alt="bg"/>
				</figure>
			</div>;

		const rightSide = <div className="title-screen__inner">
			<div className="title-screen__info">
				<figure className="title-screen__icon">
					<MediaUpload
						onSelect={media => {
							setAttributes({[`${imageKey}2`]: media.url});
						}}
						type="image"
						value={attributes.imageID}
						render={({open}) => getImageButton(open, 2, imageKey)}
					/>
				</figure>
				<div className="title-screen__name">
					<RichText
						onChange={content => setAttributes({screenName: content})}
						value={attributes.screenName}
						placeholder={slideAttributes.screenName.default}
					/>
				</div>
			</div>
		</div>;

		return <div className={className + " block-presentation-slide all-empty"}>

			<InspectorControls>

				<h3>{__('Pick background image:', 'np')}</h3>
				<MediaUpload
					onSelect={media => {
						setAttributes({[`${imageKey}1`]: media.url});
					}}
					type="image"
					value={attributes.imageID}
					render={({open}) => getImageButton(open, 1, imageKey)}
				/>
				<br/>
			</InspectorControls>

			<div className="screen_body_wrapper start no_relative">
				<div className="title-screen title-screen--bg opacity_animate animated">
					{attributes.flipped ? <Fragment>{rightSide}{leftSide}</Fragment> :
						<Fragment>{leftSide}{rightSide}</Fragment>}
				</div>
			</div>
		</div>;
	},
	save({attributes}) {

		const leftSide = attributes[`${imageKey}1`] &&
			<div className="title-screen__inner title-screen__inner--bg">
				<figure className="title-screen__image">
					<img src={attributes[`${imageKey}1`]} alt="bg"/>
				</figure>
			</div>;

		const rightSide = <div className="title-screen__inner">
				<div className="title-screen__info">
					{attributes[`${imageKey}2`] &&
					<figure className="title-screen__icon">
						<img src={attributes[`${imageKey}2`]} alt="icon"/>
					</figure>
					}
					{attributes.screenName &&
					<div className="title-screen__name">
						<RichText.Content value={attributes.screenName}/>
					</div>
					}
				</div>

		</div>;


		return <div className="screen_section screen_section--not-padding" data-section="#_SLIDE_NUMBER">

			<div className="screen_body_wrapper start no_relative">
				<div className="title-screen title-screen--bg opacity_animate">
					{attributes.flipped ? <Fragment>{rightSide}{leftSide}</Fragment> :
						<Fragment>{leftSide}{rightSide}</Fragment>}
				</div>
			</div>

		</div>;
	},
});
