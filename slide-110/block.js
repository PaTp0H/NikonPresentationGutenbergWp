import BrandWrapper from '../../../subcomponents/brand-wrapper';
import newLiner from '../../../subcomponents/newLiner';
import {imgUploader} from "../../../utils";

const {RichText, PlainText, InnerBlocks, InspectorControls, MediaUpload} = wp.editor;
const {registerBlockType} = wp.blocks;
const {Fragment} = wp.element;
const {SelectControl, Modal, Button} = wp.components;
const {withState} = wp.compose;
const {__} = wp.i18n;

try {
	var icon = require('./icon').default; //Icon is generated by bash script in the theme root. Use "bash convert-thumbnails-to-svg.bash"
} catch (ex) {
	var icon = 'editor-code';
}


registerBlockType('presentation/slide110', {
	title: __('Slide #110', 'np'),
	icon: icon,
	category: 'nikon-presentations',
	attributes: {
		slideTitle: {
			type: 'string',
			selector: '.brand_wrapper .gold',
			source: 'html',
			default: 'OUTSTANDING INNOVATION',
		},
		slideSubTitle: {
			type: 'string',
			selector: '.brand_wrapper .white',
			source: 'html',
			default: '100 years of expertise<br>in high-precision optics'
		},
		items: {
			source: 'query',
			selector: '.timeline-card.js-card-for-popup',
			query: {
				thumbImage: {
					type: 'string',
					source: 'attribute',
					attribute: 'src',
					selector: 'img.thumbnail-image'
				},
				fullImage: {
					type: 'string',
					source: 'attribute',
					attribute: 'src',
					selector: 'img.full-image'
				},
				title: {
					type: 'string',
					source: 'html',
					selector: '.timeline-card__year.np-collapse',
				},
				contentTitle: {
					type: 'string',
					source: 'html',
					selector: '.timeline-popup .timeline-card__year',
				},
				contentCaption: {
					type: 'string',
					source: 'html',
					selector: '.timeline-card__title',
				},
				description: {
					type: 'array',
					source: 'children',
					selector: '.timeline-card__descr'
				},
			},
			default: [
				{
					thumbImage: imgSrc('timeline/100-2002-small.png'),
					fullImage: imgSrc('timeline/100-2002-big_2x.png'),
					title: '2002',
					contentTitle: '2002',
					contentCaption: '<span class="np-style-highlight-white">SeeMax</span>',
					description: [
						<p>Nikon introduces</p>,
						<p>the first Single</p>,
						<p>Vision lens, custom</p>,
						<p>made according to</p>,
						<p>frame shape.</p>
					],
				},
				{
					thumbImage: imgSrc('timeline/100-2005-small_2x.png'),
					fullImage: imgSrc('timeline/100-2005-big_2x.png'),
					title: '2005',
					contentTitle: '2005',
					contentCaption: '<span class="np-style-highlight-white">RelaxSee</span>',
					description: [
						<p>Nikon introduces</p>,
						<p>the first eye strain</p>,
						<p>relief lens.</p>,
					]
				},
				{
					thumbImage: imgSrc('timeline/100-2011-small_2x.png'),
					fullImage: imgSrc('timeline/100-2011-big_2x.png'),
					title: '2011',
					contentTitle: '2011',
					contentCaption: '<span class="np-style-highlight-white">SeeCoat Blue</span>',
					description: [
						<p>Nikon introduces</p>,
						<p>SeeCoat Blue, the</p>,
						<p>first clear lens that</p>,
						<p>filters blue light,</p>,
						<p>increasing contrast</p>,
						<p>for screen users.</p>,
					]
				},
				{
					thumbImage: imgSrc('timeline/100-2016-small_2x.png'),
					fullImage: imgSrc('timeline/100-2016-big_2x.png'),
					title: '2016',
					contentTitle: '2016',
					contentCaption: '<span class="np-style-highlight-white">SeeCoat Bright</span>',
					description: [
						<p>Nikon continues to</p>,
						<p>innovate and launched</p>,
						<p>SeeCoat Bright the first</p>,
						<p>functional coating that</p>,
						<p>improves the brightness</p>,
						<p>and contrast perception</p>,
						<p>for wearers having</p>,
						<p>difficulties seeing in dim</p>,
						<p>light conditions.</p>,
					]
				},
				{
					thumbImage: imgSrc('timeline/100- 2019-small_2x.png'),
					fullImage: imgSrc('timeline/100-2019-big.png'),
					title: '2019',
					contentTitle: '2019',
					contentCaption: '<span class="np-style-highlight-white">SeeMax ultimate</span>',
					description: [
						<p>Nikon takes on a</p>,
						<p>technological shift</p>,
						<p>regarding the conception</p>,
						<p>of its progressive</p>,
						<p>lenses. The design is</p>,
						<p>never predetermined; it is</p>,
						<p>uniquely created by you</p>,
						<p>and the consumer.</p>
					]
				},
			],
		}
	},
	edit: withState({
		activeCard: false,
		showModal: false
	})(({className, attributes, setAttributes, activeCard, showModal, setState}) => {


		console.log(attributes)


		const item = (i, ghost = false) => {
			return <li
				className={(i === activeCard ? 'active ' : '') + (ghost ? 'ghost ' : '') + "timeline-card js-card-for-popup"}
				data-id="timeline-1"
				onClick={() => {
					if (ghost) {
						let items = attributes.items.slice();
						items.push({});
						setAttributes({items: items});
						return;
					}
					setState({activeCard: i === activeCard ? false : i})
				}}>
				{!ghost && <Fragment>

					{i === activeCard && attributes.items.length > 1 &&
					<InspectorControls>
						<h3 style={{color: 'red'}}>{__("Remove this item", 'mp')}</h3>
						<Button
							onClick={() => {
								if (!confirm(__("Are you sure?", 'mp')))
									return;
								let cards = attributes.items.slice();
								items.splice(i, 1);
								setAttributes({items: cards});
							}}
							className="button button-large"
						>
							{__('Remove', 'np')}
						</Button>
						<br/><br/>
						<h3>Move this item:</h3>
						<div>
							{0!==i&&<Button
								onClick={() => {
									let items = attributes.items.slice();
									let temp = items[i];
									items[i] = items[i-1];
									items[i-1] = temp;
									setAttributes({
										items: items,
									});
									setState({
										activeCard: activeCard - 1,
									});
								}}
								className="button button-large"
							>
								&larr;{__('Left', 'np')}
							</Button>}
							<span>&nbsp;</span>
							{i !== attributes.items.length - 1 && <Button
								onClick={() => {
									let items = attributes.items.slice();
									let temp = items[i];
									items[i] = items[i+1];
									items[i+1] = temp;
									setAttributes({
										items: items,
									});
									setState({
										activeCard: activeCard + 1,
									});
								}}
								className="button button-large"
							>
								{__('Right', 'np')}&rarr;
							</Button>}
						</div>
						<br/>
					</InspectorControls>
					}

					<figure>
						<MediaUpload
							onSelect={media => {
								let items = attributes.items.slice();
								items[i].thumbImage = media.url;
								setAttributes({items: items});
							}}
							type="image"
							render={({open}) => imgUploader(attributes.items[i].thumbImage, open)}
						/>
					</figure>


					<RichText
						value={attributes.items[i].title}
						placeholder="Title"
						className="timeline-card__year"
						onChange={content => {
							let items = attributes.items.slice();
							items[i].title = content;
							setAttributes({items: items});
						}}
					/>

					<button className="expand-card-btn" onClick={() => setState({showModal: i})}/>

					{i === showModal && (
						<Modal title={__("Card popup content", 'np')}
							   onRequestClose={() => {
								   return false;
							   }}
							   className='components-modal__frame snake-slide np-popup all-empty timeline-popup timeline-card'>


							<div className="">
								<figure>
									<MediaUpload
										onSelect={media => {
											let items = attributes.items.slice();
											items[i].fullImage = media.url;
											setAttributes({items: items});
										}}
										type="image"
										render={({open}) => imgUploader(attributes.items[i].fullImage, open)}
									/>
								</figure>
								<div className="timeline-card__body">
							<span className="timeline-card__year">
								<RichText
									value={attributes.items[i].contentTitle}
									placeholder={__("Popup title", 'np')}
									onChange={content => {
										let items = attributes.items.slice();
										items[i].contentTitle = content;
										setAttributes({items: items});
									}}
								/>
							</span>
									<h4 className="timeline-card__title">
										<RichText
											value={attributes.items[i].contentCaption}
											placeholder={__("Popup image caption", 'np')}
											onChange={content => {
												let items = attributes.items.slice();
												items[i].contentCaption = content;
												setAttributes({items: items});
											}}
										/>
									</h4>
									<p className="timeline-card__descr">
										<RichText
											value={attributes.items[i].description}
											placeholder={__("Popup description", 'np')}
											multiline="p"
											className=""
											onChange={content => {
												let items = attributes.items.slice();
												items[i].description = content;
												setAttributes({items: items});
											}}/>
									</p>
								</div>

								<button className="popup__close js-close-popup-btn"
										onClick={() => setState({showModal: false})}/>
							</div>


						</Modal>
					)}
				</Fragment>
				}
			</li>;
		};

		return <div className={className + " block-presentation-slide all-empty"} style={img('timeline-bg.jpg')}>

			<div className="brand_wrapper">
					<span className="gold">
						<RichText
							onChange={content => setAttributes({slideTitle: content})}
							value={attributes.slideTitle}
							placeholder="SLIDE TITLE"
							className="slide-title-input"
						/>
						 </span>
				<span className="white opacity_animate">
							<RichText
								onChange={content => setAttributes({slideSubTitle: content})}
								value={attributes.slideSubTitle}
								placeholder="Slide subtitle"
								className="slide-subtitle-input"
							/>
					</span>
			</div>

			<div className="screen_body_wrapper no_relative">
				<ul className="timeline">
					{attributes.items.map((cardItem, i) => {
						return item(i);
					})}
					{attributes.items.length < 6 && item(6, true)}
				</ul>
			</div>
		</div>;
	}),
	save({attributes}) {

		const item = (i) => {
			return <li className="timeline-card js-card-for-popup" data-id="timeline-1">
				{attributes.items[i].thumbImage && <figure>
					<img className='thumbnail-image' alt="image" src={attributes.items[i].thumbImage}/>
				</figure>}
				<span className="timeline-card__year np-collapse">
				<RichText.Content value={attributes.items[i].title}/>
			</span>
				<button className="expand-card-btn js-expand-btn"/>
				<div className="timeline-popup slide-popup" data-id="popup-id">
					<div className="timeline-card">
						{attributes.items[i].fullImage && <figure>
							<img className='full-image' alt="image" src={attributes.items[i].fullImage}/>
						</figure>}

						{!attributes.items[i].fullImage && attributes.items[i].thumbImage && <figure>
							<img className='full-image' alt="image" src={attributes.items[i].thumbImage}/>
						</figure>}

						<span className="timeline-card__year">
						<RichText.Content value={attributes.items[i].contentTitle}/>
					</span>
						<h4 className="timeline-card__title highlight-white">
							<RichText.Content value={attributes.items[i].contentCaption}/>
						</h4>

						<div className="timeline-card__descr">
							<RichText.Content value={attributes.items[i].description}/>
						</div>

						<button className="close-popup-btn js-close-popup-btn"/>
					</div>
				</div>
			</li>
		};

		return <div className="screen_section" data-section="#_SLIDE_NUMBER" style={img('timeline-bg.jpg')}>
			{(attributes.slideTitle || attributes.slideSubTitle) &&
			<div className="brand_wrapper">
				{attributes.slideTitle &&
				<span className="gold">
						<RichText.Content value={attributes.slideTitle}/>
					</span>
				}
				{attributes.slideSubTitle &&
				<span className="white opacity_animate">
						<RichText.Content value={attributes.slideSubTitle}/>
					</span>
				}
			</div>
			}
			<div className="screen_body_wrapper no_relative">
				<ul className="timeline opacity_animate">
					{attributes.items.map((cardItem, i) => {
						return item(i);
					})}
				</ul>
			</div>
		</div>;
	},
});