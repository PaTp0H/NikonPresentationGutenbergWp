const {RichText, PlainText, InnerBlocks, InspectorControls, MediaUpload} = wp.editor;
const {registerBlockType} = wp.blocks;
const {Fragment} = wp.element;
const {SelectControl, Button, ToggleControl} = wp.components;
const {__} = wp.i18n;

try {
	var icon = require('./icon').default; //Icon is generated by bash script in the theme root. Use "bash convert-thumbnails-to-svg.bash"
} catch (ex) {
	var icon = 'editor-code';
}

const slideAttributes = {
	background: {
		attribute: 'style',
		selector: '.screen_section',
		default: imgSrc('office/bg-office-01.png')
	},
	title :{
    type: 'string',
    selector: '.inf-know__title',
    default: 'indoors?',
    source: 'html',
  },

  description :{
    type: 'string',
    source: 'html',
    selector: '.inf-know__descr p',
    default: 'How much time <br> do you spend'
  },

  cardText :{
    type: 'string',
    source: 'html',
    selector: '.inf-know__card p',
    default: 'Do you experience <br>discomfort, back pain <br>or a stiff neck?'
  },

  items: {
    type: 'array',
    source: 'query',
    selector: '.inf-know__img',
    default: [
			{
        itemImage: imgSrc('office/of-indoors-01.jpg'),
      },
			{
        itemImage: imgSrc('office/of-indoors-02.jpg'),
      },
			{
        itemImage: imgSrc('office/of-indoors-03.jpg'),
      },
			{
        itemImage: imgSrc('office/of-indoors-04.jpg'),
      },
			{
        itemImage: imgSrc('office/of-indoors-05.jpg'),
      },
			{
        itemImage: imgSrc('office/of-indoors-06.jpg'),
      },
    ],
    query: {
      itemImage: {
        type: 'string',
        source: 'attribute',
        attribute: 'src',
        selector: 'img',
      },
    },
  },
};

registerBlockType('presentation/slide80', {
	title: __('Slide: #80', 'np'),
	icon: icon,
	category: 'nikon-catalog',
	attributes: slideAttributes,
	edit({className, attributes, setAttributes}) {

		const getImageButton = (openEvent, value) => {

			if (value)
				return (
					<img
						src={value}
						onClick={openEvent}
						className="image"
					/>
				);

			return (
				<div className="button-container">
					<Button
						onClick={openEvent}
						className="button button-large"
					>
						{__('Pick an image', 'np')}
					</Button>
				</div>
			);
    };

    const item = (i) => {
      return <figure class="inf-know__img">
        <MediaUpload
          onSelect={media => {
            let items = attributes.items.slice();
            items[i].itemImage = media.url;
            setAttributes({items: items});
          }}
          type="image"
          value={attributes.imageID}
          render={({open}) => getImageButton(open, attributes.items[i].itemImage)}
        />
      </figure>
    }


		return <div className={className + " block-presentation-slide all-empty"} style={{backgroundImage: `url(${attributes.background})`}}>

      <InspectorControls>
        <h3>{__('Pick background image', 'np')}:</h3>
        <MediaUpload
          onSelect={media => {
            setAttributes({background: media.url});
          }}
          type="image"
          value={attributes.imageID}
          render={({open}) => getImageButton(open, attributes.background)}
        />
      </InspectorControls>

      <div className="screen_body_wrapper start bottom no_relative">
        <div class="inf-know inf-know--office">
          <div class="inf-know__wrap">
            <div class="inf-know__left">
              <div class="inf-know__descr">
                <p>
                  <RichText
                    onChange={content => setAttributes({description: content})}
                    value={attributes.description}
                  />
                </p>
              </div>
              <span class="inf-know__title">
                <RichText
                  onChange={content => setAttributes({title: content})}
                  value={attributes.title}
                />
              </span>
            </div>
            <div class="inf-know__right">
              <div class="inf-know__grid">
                {attributes.items.map((el, i) => {
                  return item(i);
                })}
                <div class="inf-know__card">
                  <p>
                    <RichText
                      onChange={content => setAttributes({cardText: content})}
                      value={attributes.cardText}
                    />
                  </p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
	},
	save({attributes}) {

    const item = (i) => {
      return <figure class="inf-know__img">
        <img src={attributes.items[i].itemImage}/>
      </figure>
    }

		return <div className="screen_section screen_section--not-padding" data-section="#_SLIDE_NUMBER" style={{backgroundImage: `url(${attributes.background})`}}>

      <InspectorControls>
        <h3>{__('Pick background image', 'np')}:</h3>
        <MediaUpload
          onSelect={media => {
            setAttributes({background: media.url});
          }}
          type="image"
          value={attributes.imageID}
          render={({open}) => getImageButton(open, attributes.background)}
        />
      </InspectorControls>

      <div className="screen_body_wrapper start bottom no_relative">
        <div class="inf-know inf-know--office opacity_animate">
          <div class="inf-know__wrap">
            <div class="inf-know__left">
              <div class="inf-know__descr">
                <p>
                  <RichText.Content value={attributes.description}/>
                </p>
              </div>
              <span class="inf-know__title">
                <RichText.Content value={attributes.title}/>
              </span>
            </div>
            <div class="inf-know__right">
              <div class="inf-know__grid">
                {attributes.items.map((el, i) => {
                  return item(i);
                })}
                <div class="inf-know__card">
                  <p>
                    <RichText.Content value={attributes.cardText}/>
                  </p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
		</div>;
	},
});
